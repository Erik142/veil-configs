// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: proto/nebula_config.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NebulaConfigServiceClient is the client API for NebulaConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NebulaConfigServiceClient interface {
	GetNebulaConfig(ctx context.Context, in *GetNebulaConfigRequest, opts ...grpc.CallOption) (*GetNebulaConfigResponse, error)
}

type nebulaConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNebulaConfigServiceClient(cc grpc.ClientConnInterface) NebulaConfigServiceClient {
	return &nebulaConfigServiceClient{cc}
}

func (c *nebulaConfigServiceClient) GetNebulaConfig(ctx context.Context, in *GetNebulaConfigRequest, opts ...grpc.CallOption) (*GetNebulaConfigResponse, error) {
	out := new(GetNebulaConfigResponse)
	err := c.cc.Invoke(ctx, "/proto.NebulaConfigService/GetNebulaConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NebulaConfigServiceServer is the server API for NebulaConfigService service.
// All implementations must embed UnimplementedNebulaConfigServiceServer
// for forward compatibility
type NebulaConfigServiceServer interface {
	GetNebulaConfig(context.Context, *GetNebulaConfigRequest) (*GetNebulaConfigResponse, error)
	mustEmbedUnimplementedNebulaConfigServiceServer()
}

// UnimplementedNebulaConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNebulaConfigServiceServer struct {
}

func (UnimplementedNebulaConfigServiceServer) GetNebulaConfig(context.Context, *GetNebulaConfigRequest) (*GetNebulaConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNebulaConfig not implemented")
}
func (UnimplementedNebulaConfigServiceServer) mustEmbedUnimplementedNebulaConfigServiceServer() {}

// UnsafeNebulaConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NebulaConfigServiceServer will
// result in compilation errors.
type UnsafeNebulaConfigServiceServer interface {
	mustEmbedUnimplementedNebulaConfigServiceServer()
}

func RegisterNebulaConfigServiceServer(s grpc.ServiceRegistrar, srv NebulaConfigServiceServer) {
	s.RegisterService(&NebulaConfigService_ServiceDesc, srv)
}

func _NebulaConfigService_GetNebulaConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNebulaConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NebulaConfigServiceServer).GetNebulaConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NebulaConfigService/GetNebulaConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NebulaConfigServiceServer).GetNebulaConfig(ctx, req.(*GetNebulaConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NebulaConfigService_ServiceDesc is the grpc.ServiceDesc for NebulaConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NebulaConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NebulaConfigService",
	HandlerType: (*NebulaConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNebulaConfig",
			Handler:    _NebulaConfigService_GetNebulaConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/nebula_config.proto",
}
